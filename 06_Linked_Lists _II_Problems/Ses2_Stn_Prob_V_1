# Breakout Problems Session 2
# Standard Problem Set Version 1
"""
Problem Solving Approach
We will approach problems using the six steps in the UMPIRE approach.
UMPIRE: Understand, Match, Plan, Implement, Review, Evaluate.

We’ll apply these six steps to the problems we’ll see in the first half of the course.

We will learn to:

- Understand the problem
- Match identifies common approaches you've seen/used before
- Plan a solution step-by-step, and
- Implement the solution
- Review your solution
- Evaluate your solution's time and space complexity and think critically about the advantages and disadvantages of your chosen approach."""
'''
Problem 1: Wild Goose Chase
You're a detective and have been given an anonymous tip on your latest case, but something about it seems fishy - you suspect the clue might be a red herring meant to send you around in circles. Write a function is_circular() that accepts the head of a singly linked list clues and returns True if the tail of the linked list points at the head of the linked list. Otherwise, return False.

Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.

    U - Understand
        I - Input - the head of a singly linked list clues
        O - Output - returns True if the tail of the linked list points at the head of the linked list. Otherwise, return False.
        C - constraints/considerations - Node value should be string
        E - example/edge cases
    M - Match - a slow-fast pointer problem
    P - Plan
        High-level: 

        Steps:
        1. create slow and fast pointers => head
        2. use loop to traverse the LL
            1. slow goes one step forward and fast goes 2 stpes forward
                if slow == fast, break
        3. return slow == fast

    I - Implement
'''
class Node:
    def __init__(self, value, next=None):
        self.value = value
        self.next = next

def is_circular(clues):
    # Handle empty list case
    if not clues or not isinstance(clues.value, str):
         return False
    slow = clues
    fast = clues 
    while fast and fast.next:
         slow = slow.next
         fast = fast.next.next
         # if pointers equal to each other, cycle exists
         if slow == fast:
              return True
    return False
     
# Example Usage:
clue1 = Node("The stolen goods are at an abandoned warehouse")
clue2 = Node("The mayor is accepting bribes")
clue3 = Node("They dumped their disguise in the lake")
clue1.next = clue2
clue2.next = clue3
clue3.next = clue1

# print(is_circular(clue1))
# Example Output: 'True'
''' Complexity Analysis: 
- Time complexity: O(n) - In the worst case (no cycle), we traverse the entire list once
- Space complexity: O(1) 
    only uses 2 pointers regardless of input size, 
    no additinal data structure or recursive calls
'''

'''
# Problem 2: Breaking the Cycle
All the clues that lead us in circles are false evidence we need to purge! Given the head of a linked list evidence, clean up the evidence list by identifying any false clues. Write a function collect_false_evidence() that returns an array containing all values that are part of any cycle in evidence. Return the values in any order.

Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.

    U - Understand
        I - Input
        O - Output 
        C - constraints/considerations
        E - example/edge cases
    M - Match
    P - Plan
        High-level: 

        Steps: 

    I - Implement
'''
class Node:
    def __init__(self, value, next=None):
        self.value = value
        self.next = next

def collect_false_evidence(evidence):
	pass

# Example usage: 
clue1 = Node("Unmarked sedan seen near the crime scene")
clue2 = Node("The stolen goods are at an abandoned warehouse")
clue3 = Node("The mayor is accepting bribes")
clue4 = Node("They dumped their disguise in the lake")
clue1.next = clue2
clue2.next = clue3
clue3.next = clue4
clue4.next = clue2

clue5 = Node("A masked figure was seen fleeing the scene")
clue6 = Node("Footprints lead to the nearby woods")
clue7 = Node("A broken window was found at the back")
clue5.next = clue6
clue6.next = clue7

# print(collect_false_evidence(clue1))
# print(collect_false_evidence(clue5))

# Example Output:

# ['The stolen goods are at an abandoned warehouse', 'The mayor is accepting bribes', 
# 'They dumped their disguise in the lake']
# []

"""
Problem 3: Prioritizing Suspects
You've identified a list of suspect, but time is limited and you won't be able to question all of them today. Write a function partition() to help prioritize the order in which you question suspects. Given the head of a linked list of integers suspect_ratings, where each integer represents the suspiciousness of the a given suspect and a value threshold, partition the linked list such that all nodes with values greater than threshold come before nodes with values less than or equal to threshold.

Return the head of the partitioned list.

Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.

U - Understand
    I - Input
    O - Output 
    C - constraints/considerations
    E - example/edge cases
M - Match
    HINT: This problem may benefit from the temporary head technique.
P - Plan
    High-level: 

    Steps: 

I - Implement
"""

class Node:
    def __init__(self, value, next=None):
        self.value = value
        self.next = next
    
# For testing
def print_linked_list(head):
    current = head
    while current:
        print(current.value, end=" -> " if current.next else "\n")
        current = current.next

def partition(suspect_ratings, threshold):
	pass
# Example Usage:

suspect_ratings = Node(1, Node(4, Node(3, Node(2, Node(5, Node(2))))))

# print_linked_list(partition(suspect_ratings, 3))

'''Example Output:

4 -> 5 -> 1 -> 3 -> 2 -> 2
Explanation: 
Note that nodes 4 and 5 can be in any order in the result list so long as they come before
3, 2, and 1. 
Similarly, 3, 2, and 1 can come in any order so long as they are after 4 and 5. 
5 -> 4 -> 3 -> 1 -> 2 -> 2 would also be a possible acceptable answer'''

"""

U - Understand
    I - Input
    O - Output 
    C - constraints/considerations
    E - example/edge cases
M - Match
P - Plan
    High-level: 

    Steps: 

I - Implement """

"""

U - Understand
    I - Input
    O - Output 
    C - constraints/considerations
    E - example/edge cases
M - Match
P - Plan
    High-level: 

    Steps: 

I - Implement """

"""

U - Understand
    I - Input
    O - Output 
    C - constraints/considerations
    E - example/edge cases
M - Match
P - Plan
    High-level: 

    Steps: 

I - Implement """
